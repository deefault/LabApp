/**
 * Teacher api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ConversationDto } from '../model/conversationDto';
import { StudentAssignmentDetailDto } from '../model/studentAssignmentDetailDto';
import { StudentAssignmentDto } from '../model/studentAssignmentDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class StudentAssignmentsService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param id 
     * @param score 
     * @param fineScore 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public approve(id: number, score?: number, fineScore?: number, observe?: 'body', reportProgress?: boolean): Observable<StudentAssignmentDetailDto>;
    public approve(id: number, score?: number, fineScore?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StudentAssignmentDetailDto>>;
    public approve(id: number, score?: number, fineScore?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StudentAssignmentDetailDto>>;
    public approve(id: number, score?: number, fineScore?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling approve.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (score !== undefined && score !== null) {
            queryParameters = queryParameters.set('score', <any>score);
        }
        if (fineScore !== undefined && fineScore !== null) {
            queryParameters = queryParameters.set('fineScore', <any>fineScore);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<StudentAssignmentDetailDto>('patch',`${this.basePath}/api/Teacher/StudentAssignments/${encodeURIComponent(String(id))}/Approve`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param assignmentId 
     * @param onlyNew 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public get(assignmentId: number, onlyNew?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<StudentAssignmentDto>>;
    public get(assignmentId: number, onlyNew?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<StudentAssignmentDto>>>;
    public get(assignmentId: number, onlyNew?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<StudentAssignmentDto>>>;
    public get(assignmentId: number, onlyNew?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (assignmentId === null || assignmentId === undefined) {
            throw new Error('Required parameter assignmentId was null or undefined when calling get.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (onlyNew !== undefined && onlyNew !== null) {
            queryParameters = queryParameters.set('onlyNew', <any>onlyNew);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<StudentAssignmentDto>>('get',`${this.basePath}/assignments/${encodeURIComponent(String(assignmentId))}/student-assignments`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param onlyNew 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAll(onlyNew?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<StudentAssignmentDto>>;
    public getAll(onlyNew?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<StudentAssignmentDto>>>;
    public getAll(onlyNew?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<StudentAssignmentDto>>>;
    public getAll(onlyNew?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (onlyNew !== undefined && onlyNew !== null) {
            queryParameters = queryParameters.set('onlyNew', <any>onlyNew);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<StudentAssignmentDto>>('get',`${this.basePath}/api/Teacher/StudentAssignments`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param groupId 
     * @param onlyNew 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getByGroup(groupId: number, onlyNew?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<StudentAssignmentDto>>;
    public getByGroup(groupId: number, onlyNew?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<StudentAssignmentDto>>>;
    public getByGroup(groupId: number, onlyNew?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<StudentAssignmentDto>>>;
    public getByGroup(groupId: number, onlyNew?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling getByGroup.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (onlyNew !== undefined && onlyNew !== null) {
            queryParameters = queryParameters.set('onlyNew', <any>onlyNew);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<StudentAssignmentDto>>('get',`${this.basePath}/groups/${encodeURIComponent(String(groupId))}/assignments`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getById(id: number, observe?: 'body', reportProgress?: boolean): Observable<StudentAssignmentDetailDto>;
    public getById(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StudentAssignmentDetailDto>>;
    public getById(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StudentAssignmentDetailDto>>;
    public getById(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<StudentAssignmentDetailDto>('get',`${this.basePath}/api/Teacher/StudentAssignments/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getConversation(id: number, observe?: 'body', reportProgress?: boolean): Observable<ConversationDto>;
    public getConversation(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ConversationDto>>;
    public getConversation(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ConversationDto>>;
    public getConversation(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getConversation.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ConversationDto>('get',`${this.basePath}/api/Teacher/StudentAssignments/${encodeURIComponent(String(id))}/conversation`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public requestChanges(id: number, observe?: 'body', reportProgress?: boolean): Observable<StudentAssignmentDetailDto>;
    public requestChanges(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StudentAssignmentDetailDto>>;
    public requestChanges(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StudentAssignmentDetailDto>>;
    public requestChanges(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling requestChanges.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<StudentAssignmentDetailDto>('patch',`${this.basePath}/api/Teacher/StudentAssignments/${encodeURIComponent(String(id))}/RequestChanges`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param score 
     * @param fineScore 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateScore(id: number, score?: number, fineScore?: number, observe?: 'body', reportProgress?: boolean): Observable<StudentAssignmentDetailDto>;
    public updateScore(id: number, score?: number, fineScore?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StudentAssignmentDetailDto>>;
    public updateScore(id: number, score?: number, fineScore?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StudentAssignmentDetailDto>>;
    public updateScore(id: number, score?: number, fineScore?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateScore.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (score !== undefined && score !== null) {
            queryParameters = queryParameters.set('score', <any>score);
        }
        if (fineScore !== undefined && fineScore !== null) {
            queryParameters = queryParameters.set('fineScore', <any>fineScore);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<StudentAssignmentDetailDto>('patch',`${this.basePath}/api/Teacher/StudentAssignments/${encodeURIComponent(String(id))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
